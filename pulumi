#!/usr/bin/env bash


function _echo_to_stderr_and_exit_with_error {
  printf "%s\n" "${@}" >&2; exit 1
}

function _check_image_exist {
  local image="${1}"
  local tag="${2}"

  docker image inspect "${image}:${tag}" &>/dev/null
}

function _build_image {
  local image="${1}"
  local tag="${2}"
  local build_args="${@:3}"
  local build_args_string="$(for arg in ${build_args[@]}; do echo --build-arg=${arg} ; done)"

  [[ -f "${SCRIPT_DIR}/Dockerfile" ]] || _echo_to_stderr_and_exit_with_error "Отсутствует файл 'Dockerfile' - аварийный выход"
  sudo docker build \
  ${build_args_string} \
  --tag "${image}:${tag}" \
  .

}

function _preflight {
  if ! _check_image_exist "${PULUMI_PROXMOXVE_YAML_DOCKER_IMAGE}" "${PULUMI_PROXMOXVE_YAML_DOCKER_TAG}"; then
    _build_image \
    "${PULUMI_PROXMOXVE_YAML_DOCKER_IMAGE}" \
    "${PULUMI_PROXMOXVE_YAML_DOCKER_TAG}" \
    "PULUMI_VERSION=${PULUMI_VERSION}" \
    "PROXMOXVE_PLUGIN_VERSION=${PROXMOXVE_PLUGIN_VERSION}" \
    || _echo_to_stderr_and_exit_with_error "Не удалось собрать докер образ - аварийный выход"
  fi

  [[ -d "${SCRIPT_DIR}/projects" ]] || _echo_to_stderr_and_exit_with_error "Отсутствует каталог 'projects' - аварийный выход"
}

function _run_container {
  docker run \
  --rm \
  --interactive \
  --tty \
  --network host \
  --volume "${SCRIPT_DIR}/.pulumi:/root/.pulumi" \
  --volume "${SCRIPT_DIR}/projects:/projects" \
  "${PULUMI_PROXMOXVE_YAML_DOCKER_IMAGE}:${PULUMI_PROXMOXVE_YAML_DOCKER_TAG}" \
  --cwd "/projects/$(basename ${PWD})" \
  ${PULUMI_ARGS} \
  ${@}
}

function _main {
  SCRIPT_DIR="$( dirname -- "$( readlink -f -- "$0"; )"; )"

  [[ -f "${SCRIPT_DIR}/pulumi-env.sh" ]] \
  && source "${SCRIPT_DIR}/pulumi-env.sh" \
  || _echo_to_stderr_and_exit_with_error "Отсутствует файл 'salt-ssh-env.sh' - аварийный выход"
  _preflight
  _run_container "${@}"
}


_main "${@}"
