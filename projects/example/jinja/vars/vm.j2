{%- import 'vars/network.j2' as network %}


{%- set settings = {
  'template_vm_id': 500,
  'vm_id_start': 500,
  'cloud_init_interface': 'ide2',
  'cdrom_inferface': 'ide3',
  'iso_datastore_id': 'local',
  'cloud_init_datastore_id': 'local-zfs',
  'disk_datastore_id': 'local-zfs',
  'efi_disk_datastore_id': 'local-zfs',
  'external_network_bridge': 'vmbr0',
  'internal_network_bridge': 'vmbr1',
} %}

{%- set default_options = {
  'dependsOn': [
    '${' ~ 'OracleLinux-R9-U4-x86_64-dvd_kickstart_iso-hyper' ~ '}',
    '${' ~ 'cloud-init_root_with_password_and_private_key_yaml' ~ '-' ~ 'hyper' ~ '}',
    '${' ~ 'template' '_' ~ network['domain'] | replace('.', '_') ~ '}'
    ],
  'ignoreChanges': []
} %}

{%- set custom_options = {
  'template': {
    'dependsOn': [
      '${' ~ 'OracleLinux-R9-U4-x86_64-dvd_kickstart_iso-hyper' ~ '}',
      '${' ~ 'cloud-init_root_with_password_and_private_key_yaml' ~ '-' ~ 'hyper' ~ '}'
    ]
  }
} %}

{%- set default_properties = {
  'agent': {
    'enabled': true,
    'timeout': '15m',
    'trim': true,
    'type': 'virtio'
  },
  'bios': 'ovmf',
  'cdrom': {
    'enabled': false,
    'fileId': '',
    'interface': settings['cdrom_inferface']
  },
  'bootOrders': ['scsi1'],
  'clone': {
    'vmId': settings['template_vm_id'],
    'nodeName': 'hyper',
    'datastoreId': settings['disk_datastore_id'],
    'full': true,
    'retries': 3
  },
  'cpu': {
      'cores': 2,
      'type': 'host',
  },
  'disks': {
    'interface': 'scsi',
    'datastoreId': settings['disk_datastore_id'],
    'fileFormat': 'raw'
  },
  'efiDisk': {
      'datastoreId': settings['efi_disk_datastore_id'],
      'preEnrolledKeys': false,
      'type': '4m'
  },
  'initialization': {
    'datastoreId': settings['cloud_init_datastore_id'],
    'dns': {
      'domain': network['domain'],
      'servers': network['dns_servers']
    },
    'interface': settings['cloud_init_interface'],
    'ipConfigs': {
      'ipv4': {
        'gateway': network['external']['gateway']
      },
      'ipv6': {}
    },
    'userDataFileId': '${' ~ 'cloud-init_root_with_password_and_private_key_yaml' ~ '-' ~ 'hyper' ~ '.' ~ 'id' ~ '}'
  },
  'machine': 'q35',
  'memory': {
      'dedicated': 2048,
      'floating': 1024
  },
  'networkDevices': 
  {
    'bridge': network['internal']['bridge']
  },
  'nodeName': 'hyper',
  'onBoot': false,
  'scsiHardware': 'virtio-scsi-single',
  'stopOnDestroy': true,
} %}

{%- set custom_properties = {
  'template': {
    'agent': {
      'enabled': false
    },
    'description': 'template',
    'started': true if env("TEMPLATE_VM_IS_STARTED", default='false') == 'true' else false,
    'bootOrders': ['scsi1' if default_properties['bios'] == 'ovmf' else 'scsi0', settings['cdrom_inferface']],
    'disks': [{'size': 31}],
    'cdrom': {
      'enabled': true,
      'fileId': settings['iso_datastore_id'] ~ ':iso/OracleLinux-R9-U4-x86_64-dvd_kickstart.iso' if env("TEMPLATE_VM_IS_NOT_READY", default='false') == 'true' else ''
    },
    'cpu': {
        'cores': 4,
        'type': 'host',
    },
    'memory': {
        'dedicated': 4096,
        'floating': 4096
    },
  },
  'gw01': {
    'clone': {},
    'description': 'gw01',
    'disks': [{'size': 31}],
    'initialization': {
      'ipConfigs': [
        {
          'ipv4':{
            'address': network['external']['network'].split('.')[:-1] | join('.') 
                       ~ '.' 
                       ~ network['external']['ip_plan']['gw01']
                       ~ '/' 
                       ~ network['external']['prefix'],
            'gateway': network['external']['gateway']
          }
        },
        {
          'ipv4':{
            'address': network['internal']['network'].split('.')[:-1] | join('.') 
                       ~ '.' 
                       ~ network['internal']['ip_plan']['gw01']
                       ~ '/' 
                       ~ network['internal']['prefix'],
            'gateway': ''
          }
        }
      ]
    },
    'networkDevices': [
      {
      'bridge': network['external']['bridge']
      },
      {
      'bridge': network['internal']['bridge']
      },
    ]
  }
} %}
